generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  firstname   String
  lastname    String
  email       String    @unique
  password    String
  role        Role
  projectsPM  Project[] @relation("ProjectPM")
  memberships ProjectMember[]
  tasks       Task[]    @relation("TaskAssignee")
  activities  ActivityLog[]
  createdAt   DateTime  @default(now())
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus @default(NotStarted)
  pmId        Int      
  pm          User      @relation("ProjectPM", fields: [pmId], references: [id])
  members     ProjectMember[]
  sprints     Sprint[]
  createdAt   DateTime  @default(now())
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  firstname String?
  @@unique([projectId, userId])
}

model Sprint {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  Int
  index      Int
  startDate  DateTime
  endDate    DateTime
  duration   String
  expectedPoints Int
  achievedPoints Int @default(0)
  tasks      Task[]
  @@unique([projectId, index])
}



model Task {
  id          Int       @id @default(autoincrement())
  sprint      Sprint    @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId    Int     
  name        String
  description String?
  point       Int
  status      TaskStatus
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  Int?  
}


model ActivityLog {
  id        Int       @id @default(autoincrement())  
  user      User      @relation(fields: [userId], references: [id])
  userId    Int     
  action    String
  timestamp DateTime @default(now())
}

enum Role {
  PM
  Dev
}

enum ProjectStatus {
  NotStarted
  InProgress
  Completed
}

enum TaskStatus {
  NotStarted
  InProgress
  Completed
}
